// https://www.rfc-editor.org/rfc/rfc9457.txt
package pd

import (
	"encoding/json"
)

type ProblemDetails struct {
	// Type is a URI reference that identifies the problem type. Consumers
	// MUST use the Type URI as the problem type's primary identifier. When
	// Type is not present, its value is assumed to be "about:blank".
	Type string `json:"type"`
	// Status is a HTTP status code generated by the origin server for this
	// occurrence of the problem. New problem type definitions must document
	// the http status code for it to be used with.
	Status int `json:"status"`
	// Title is a short, human-readable summary of the problem type. New
	// problem type definitions must document a title that appropriately
	// describes it.
	Title string `json:"title"`
	// Detail is a human-readable explanation specific to this occurrence of
	// the problem.
	Detail string `json:"detail,omitempty"`
	// Instance is a URI reference that identifies the specific occurrence of
	// the problem.
	Instance string `json:"instance,omitempty"`
	Err      error  `json:"-"`
}

func (details *ProblemDetails) Error() string {
	bs, err := json.Marshal(details)
	if err != nil {
		panic(err) // Is it possible to panic?
	}
	return string(bs)
}

func (details *ProblemDetails) Unwrap() error {
	return details.Err
}
